//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <__NAMESPACE__/__CLASS__.hpp>
#include <utility>
#include <stdexcept>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
struct __NAMESPACE__::__CLASS__::impl
{
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
__NAMESPACE__::__CLASS__::__CLASS__(
  ) : pimpl( new impl )
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
__NAMESPACE__::__CLASS__::__CLASS__(
  const __CLASS__& other
  ) 
  : pimpl( new impl( *other.pimpl ) )
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
__NAMESPACE__::__CLASS__::__CLASS__(
  __CLASS__&& other
  ) : pimpl( other.pimpl )
{
  other.pimpl = nullptr;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
__NAMESPACE__::__CLASS__&
__NAMESPACE__::__CLASS__::operator=(
  __CLASS__ other
  )
{
  std::swap( pimpl, other.pimpl );
  return *this;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
__NAMESPACE__::__CLASS__&
__NAMESPACE__::__CLASS__::operator=(
  __CLASS__&& other
  )
{
  std::swap( pimpl, other.pimpl );
  return *this;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
__NAMESPACE__::__CLASS__::~__CLASS__()
{
  delete pimpl;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
std::string
toString(
  const __NAMESPACE__::__CLASS__& __CLASS___arg
  )
{
  throw std::runtime_error( "Unimplemented" );
  return ""; 
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
