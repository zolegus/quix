//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#ifndef GUARD__MEMORY__SHARED__HH
#define GUARD__MEMORY__SHARED__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <memory/shared.h>
#include <cstddef>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
class memory::shared
{
  struct impl;
  impl *pimpl;

public:

  shared( const std::size_t,  const std::size_t );
  shared( const shared& ) = delete;
  shared( shared&& ) = delete;
  shared& operator=( shared ) = delete;
  shared& operator=( shared&& ) = delete;
  ~shared();

  void *data( const std::size_t );
	std::size_t size( const std::size_t );
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#endif // GUARD__MEMORY__SHARED__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
