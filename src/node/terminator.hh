//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#ifndef GUARD__NODE__TERMINATOR__HH
#define GUARD__NODE__TERMINATOR__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <node/terminator.h>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename T, typename B >
class node::terminator
{
  struct impl;
  impl *pimpl;

  using transport_type = T;
  using behaviour_type = B;

public:

  terminator( transport_type &, behaviour_type& );
  terminator( const terminator& ) = delete;
  terminator( terminator&& ) = delete;
  terminator& operator=( terminator ) = delete;
  terminator& operator=( terminator&& ) = delete;
  ~terminator();

  void operator()();
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#endif // GUARD__NODE__TERMINATOR__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
