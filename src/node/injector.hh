//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#ifndef GUARD__NODE__INJECTOR__HH
#define GUARD__NODE__INJECTOR__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <node/injector.h>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename T, typename B >
class node::injector
{
  struct impl;
  impl *pimpl;

  using transport_type = T;
  using behaviour_type = B;

public:

  injector( transport_type&, behaviour_type& );
  injector( const injector& ) = delete;
  injector( injector&& ) = delete;
  injector& operator=( injector ) = delete;
  injector& operator=( injector&& ) = delete;
  ~injector();

  void operator()();
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#endif // GUARD__NODE__INJECTOR__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//

