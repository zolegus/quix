//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#ifndef GUARD__NODE__PROCESSOR__HH
#define GUARD__NODE__PROCESSOR__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <node/processor.h>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename T, typename B >
class node::processor
{
  struct impl;
  impl *pimpl;

  using transport_type = T;
  using behaviour_type = B;

public:

  processor( transport_type &, behaviour_type& );
  processor( const processor& ) = delete;
  processor( processor&& ) = delete;
  processor& operator=( processor ) = delete;
  processor& operator=( processor&& ) = delete;
  ~processor();

  void operator()();
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#endif // GUARD__NODE__PROCESSOR__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
