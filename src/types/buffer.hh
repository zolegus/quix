//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#ifndef GUARD__TYPES__BUFFER__HH
#define GUARD__TYPES__BUFFER__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <types/buffer.h>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename T, std::size_t R = 0 >
struct types::buffer
{
  using type = T;
  static constexpr std::size_t reserved = R;

	std::size_t size;
  type data[ reserved ];
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#endif // GUARD__TYPES__BUFFER__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
