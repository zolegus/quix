//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <utility/monitor.hpp>
#include <utility/event.hpp>
#include <utility/configuration.hpp>
//#include <node/node.hpp>
#include <utility>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
struct utility::monitor::impl
{
  impl( configuration&& config );
  configuration config;
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
utility::monitor::impl::impl(
  configuration&& other
  ) :
  config( std::move( other ) )
{
  //std::cout << toString( config ) << std::endl;
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
utility::monitor::monitor(
  configuration&& config
  )
  : pimpl( new impl( std::move( config ) ) )
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
utility::monitor::monitor(
  const monitor& other
  ) 
  : pimpl( new impl( *other.pimpl ) )
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
utility::monitor::monitor(
  monitor&& other
  ) : pimpl( other.pimpl )
{
  other.pimpl = nullptr;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
utility::monitor&
utility::monitor::operator=(
  monitor other
  )
{
  std::swap( pimpl, other.pimpl );
  return *this;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
utility::monitor&
utility::monitor::operator=(
  monitor&& other
  )
{
  std::swap( pimpl, other.pimpl );
  return *this;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
utility::monitor::~monitor()
{
  delete pimpl;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
//void
//utility::monitor::observe(
//	const node::node& n
//  )
//{
//}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
const utility::event&
utility::monitor::monitored_event() const
{
  static event e;
  return e;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
std::string
toString(
  const utility::monitor& m
  )
{ 
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
