//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <utility/daemon.hpp>
//#include <node/node.hpp>
#include <string>
#include <unordered_map>
#include <utility>
#include <sstream>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
struct utility::daemon::impl
{
  impl();
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
utility::daemon::impl::impl()
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#if 0
utility::daemon::daemon(
  node::node& n
  )
  : pimpl( new impl() )
{
  pid_t pid = fork();
  
  if( pid < 0 )
    throw std::runtime_error( "Failed to start node" );

  if( pid > 0 )
    return;

  setsid();
  chdir("/");
  umask(0);
  n();
  exit(0);
}
#endif
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
utility::daemon::daemon(
  const daemon& other
  ) 
  : pimpl( new impl( *other.pimpl ) )
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
utility::daemon::daemon(
  daemon&& other
  ) : pimpl( other.pimpl )
{
  other.pimpl = nullptr;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
utility::daemon&
utility::daemon::operator=(
  daemon other
  )
{
  std::swap( pimpl, other.pimpl );
  return *this;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
utility::daemon&
utility::daemon::operator=(
  daemon&& other
  )
{
  std::swap( pimpl, other.pimpl );
  return *this;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
utility::daemon::~daemon()
{
  delete pimpl;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
std::string
toString(
  const utility::daemon& d
  )
{ 
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
