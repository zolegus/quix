//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <manager/order.hpp>
#include <utility>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
struct manager::order::impl
{
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
manager::order::order()
  : pimpl( new impl )
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
manager::order::order(
  const manager::order& other
  ) 
  : pimpl( new impl( *other.pimpl ) )
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
manager::order::order(
  manager::order&& other
  ) : pimpl( other.pimpl )
{
  other.pimpl = nullptr;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
manager::order&
manager::order::operator=(
  manager::order other
  )
{
  std::swap( pimpl, other.pimpl );
  return *this;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
manager::order&
manager::order::operator=(
  manager::order&& other
  )
{
  std::swap( pimpl, other.pimpl );
  return *this;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
manager::order::~order()
{
  delete pimpl;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
std::string
toString(
  const manager::order& processor
  )
{ 
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
