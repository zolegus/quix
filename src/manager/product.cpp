//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <manager/product.hpp>
#include <utility>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
struct manager::product::impl
{
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
manager::product::product()
  : pimpl( new impl )
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
manager::product::product(
  const product& other
  ) 
  : pimpl( new impl( *other.pimpl ) )
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
manager::product::product(
  product&& other
  ) : pimpl( other.pimpl )
{
  other.pimpl = nullptr;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
manager::product&
manager::product::operator=(
  product other
  )
{
  std::swap( pimpl, other.pimpl );
  return *this;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
manager::product&
manager::product::operator=(
  product&& other
  )
{
  std::swap( pimpl, other.pimpl );
  return *this;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
manager::product::~product()
{
  delete pimpl;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
std::string
toString(
  const manager::product& product_arg
  )
{ 
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
