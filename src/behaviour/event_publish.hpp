//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#ifndef GUARD__BEHAVIOUR__EVENT_PUBLISH__HPP
#define GUARD__BEHAVIOUR__EVENT_PUBLISH__HPP
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <behaviour/event_publish.hh>
#include <stdexcept>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
struct behaviour::event_publish< E >::impl
{
  using event_type = E;

  unsigned int loops_mem{0};

  impl( const unsigned int );
  void operator()( event_type& );
  bool post();
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
behaviour::event_publish< E >::impl::impl(
  const unsigned int loops_arg 
  )
  : loops_mem( loops_arg )
{
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
void
behaviour::event_publish< E >::impl::operator()(
  event_type &event 
  )
{
  event = loops_mem;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
bool
behaviour::event_publish< E >::impl::post()
{
  return --loops_mem;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
behaviour::event_publish< E >::event_publish(
  void*,
  const unsigned int loops
  )
  : pimpl( new impl( loops ) )
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
behaviour::event_publish< E >::~event_publish()
{
  delete pimpl;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
void
behaviour::event_publish< E >::operator()( 
  event_type &event 
  )
{
  return pimpl->operator()( event );
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
bool
behaviour::event_publish< E >::post()
{
  return pimpl->post();
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
std::string
toString(
  const behaviour::event_publish< E >& event_publish_arg
  )
{ 
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#endif // GUARD__BEHAVIOUR__EVENT_PUBLISH__HPP
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
