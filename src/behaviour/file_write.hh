//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#ifndef GUARD__BEHAVIOUR__FILE_WRITE__HH
#define GUARD__BEHAVIOUR__FILE_WRITE__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <behaviour/file_write.h>
#include <string>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E > 
class behaviour::file_write
{
  struct impl;
  impl *pimpl;

public:

  using event_type = E;

  file_write(  void*,  const std::string& );
  file_write( const file_write& ) = delete;
  file_write( file_write&& ) = delete;
  file_write& operator=( file_write ) = delete;
  file_write& operator=( file_write&& ) = delete;
  ~file_write();

  void operator()( event_type& );
  bool post();
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#endif // GUARD__BEHAVIOUR__FILE_WRITE__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
