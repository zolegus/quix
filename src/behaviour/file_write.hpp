//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#ifndef GUARD__BEHAVIOUR__FILE_WRITE__HPP
#define GUARD__BEHAVIOUR__FILE_WRITE__HPP
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <behaviour/file_write.hh>
#include <types/buffer.hh>
#include <fstream>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
struct behaviour::file_write< E >::impl
{
  using event_type = E;

	std::ofstream file;

  impl( const std::string& );
  void operator()( event_type&);
  bool post();
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
behaviour::file_write< E >::impl::impl(
  const std::string &filename_arg
  )
  : file( filename_arg )
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
void
behaviour::file_write< E >::impl::operator()(
  event_type &event 
  )
{
	auto buffer = event.buffer_mem;
  file.write( buffer->data, buffer->size );
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
bool
behaviour::file_write< E >::impl::post()
{
  return true;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
behaviour::file_write< E >::file_write(
  void*,
	const std::string &filename_arg
  )
  : pimpl( new impl( filename_arg ) )
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
behaviour::file_write< E >::~file_write()
{
  delete pimpl;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
void
behaviour::file_write< E >::operator()( 
  event_type &event 
  )
{
  return pimpl->operator()( event );
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
bool
behaviour::file_write< E >::post()
{
  return pimpl->post();
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
std::string
toString(
  const behaviour::file_write< E >& file_write_arg
  )
{ 
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#endif // GUARD__BEHAVIOUR__FILE_WRITE__HPP
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
