//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#ifndef GUARD__BEHAVIOUR__FILE_WRITE__HPP
#define GUARD__BEHAVIOUR__FILE_WRITE__HPP
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <behaviour/file_write.hh>
#include <types/buffer.hh>
#include <fstream>
#include <iostream>
#include <stdexcept>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
struct behaviour::file_write< E >::impl
{
  using event_type = E;

	std::ofstream file;
	bool again_mem{ true };

  impl( const std::string& );
  void operator()( event_type&);
  bool post();
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
behaviour::file_write< E >::impl::impl(
  const std::string &filename_arg
  )
  : file( filename_arg )
{
  file.exceptions( std::ifstream::badbit | std::ifstream::failbit );
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
void
behaviour::file_write< E >::impl::operator()(
  event_type &event 
  )
{
  if( event.buffer_mem->size )
		{
	  std::cout << "\"" << std::string( event.buffer_mem->data, event.buffer_mem->size ) << "\"\n";
    file.write( event.buffer_mem->data, event.buffer_mem->size );
    file.put( '\n' );
		}
  else
    again_mem = false;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
bool
behaviour::file_write< E >::impl::post()
{
  return again_mem;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
behaviour::file_write< E >::file_write(
	const std::string &filename_arg
  )
  : pimpl( new impl( filename_arg ) )
{
  return;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
behaviour::file_write< E >::~file_write()
{
  delete pimpl;
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
void
behaviour::file_write< E >::operator()( 
  event_type &event 
  )
{
  return pimpl->operator()( event );
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
bool
behaviour::file_write< E >::post()
{
  return pimpl->post();
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E >
std::string
toString(
  const behaviour::file_write< E >& file_write_arg
  )
{ 
  throw std::runtime_error( "Unimplemented" );
  return ""; 
}
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#endif // GUARD__BEHAVIOUR__FILE_WRITE__HPP
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
