//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#ifndef GUARD__BEHAVIOUR__EVENT_CONSUME__HH
#define GUARD__BEHAVIOUR__EVENT_CONSUME__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <behaviour/event_consume.h>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E > 
class behaviour::event_consume
{
  struct impl;
  impl *pimpl;

public:

  using event_type = E;

  event_consume( void*, const unsigned int );
  event_consume( const event_consume& ) = delete;
  event_consume( event_consume&& ) = delete;
  event_consume& operator=( event_consume ) = delete;
  event_consume& operator=( event_consume&& ) = delete;
  ~event_consume();

  void operator()( event_type& );
  bool post();
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#endif // GUARD__BEHAVIOUR__EVENT_CONSUME__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
