//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#ifndef GUARD__BEHAVIOUR__FILE_READ__HH
#define GUARD__BEHAVIOUR__FILE_READ__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#include <behaviour/file_read.h>
#include <string>
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
template< typename E > 
class behaviour::file_read
{
  struct impl;
  impl *pimpl;

public:

  using event_type = E;

  file_read( void*, const std::string& );
  file_read( const file_read& ) = delete;
  file_read( file_read&& ) = delete;
  file_read& operator=( file_read ) = delete;
  file_read& operator=( file_read&& ) = delete;
  ~file_read();

  void operator()( event_type& );
  bool post();
};
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
#endif // GUARD__BEHAVIOUR__FILE_READ__HH
//
///////////////////////////////////////////////////////////////////////////////////////////////////
//
